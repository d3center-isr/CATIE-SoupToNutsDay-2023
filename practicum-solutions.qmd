---
title: "Module 4 / PRACTICUM SOLUTIONS"
output: html
title-block-banner: TRUE
---

# Data Analysis / HELPER FUNCTIONS

```{r}
#| message: false
#| warning: false

estimate <- function(fit, combos) {
  # -- Details about function inputs
  #    fit:
  #           must be of class 'geem' (obtained from geeM package)
  #    combos: 
  #           must be of class 'matrix'
  #           specifies linear combinations of parameter estimates
  
  # -- Compute the mean estimate
  est <- combos %*% as.matrix(fit$beta)
  
  # -- Get the appropriate variance estimate
  var <- fit$var
  
  # -- Compute standard error of mean estimate and confidence bounds
  se.est <- sqrt(diag(combos %*% var %*% t(combos)))
  lcl <- est - se.est * qnorm(0.975)
  ucl <- est + se.est * qnorm(0.975)
  
  # -- Perform a 1-degree-of-freedom Wald test on the estimate
  pvalue <- 1 - pchisq((est/se.est)^2, df = 1)
  
  # -- Combine and format output
  out <- cbind(est, lcl, ucl, se.est, pvalue)
  rownames(out) <- rownames(combos)
  colnames(out) <- c("Estimate", "95% LCL", "95% UCL", "SE", "p-value")
  out <- round(out, 2)
  
  # -- Output is a rough equivalent of SAS PROC GENMOD's ESTIMATE statement
  return(out)
}
```

# Data Analysis / WORKFLOW

## Load data

```{r}
#| message: false
#| warning: false

# -- Load package for plotting
library(ggplot2)

# -- Load package for data cleaning
library(dplyr)

# -- Load package containing simulated data and documentation
library(CATIE2023)
dat_smart <- CATIE2023::autism
```

## Marginal Model, without adjustment for baseline covariates

```{r}
#| message: false
#| warning: false

# -- Load package for data cleaning
library(dplyr)

# -- Load package for estimating model parameters and obtaining robust SE's
library(geeM)

# -- Step 1: Create weights
dat_smart <- dat_smart %>% 
  mutate(design_weights = case_when(
    A1 == -1 ~ 2,
    A1 == 1 ~ 2*R + 4*(1-R)
  ))

# -- Step 2: Replicate data from responders to A1=1
rows_not_to_replicate <- dat_smart %>% filter(A1==-1 | (A1==1 & R==0))
rows_to_replicate <- dat_smart %>% filter(A1==1 & R==1)
plus_one_pseudodata <- rows_to_replicate %>% mutate(A2 = +1)
minus_one_pseudodata <- rows_to_replicate %>% mutate(A2 = -1)

dat_smart_replicated <- rbind(rows_not_to_replicate,
                              plus_one_pseudodata,
                              minus_one_pseudodata)

# -- Step 3: For those who began with A1=-1, we set A2 to some constant, say 0
#            Any value should do as long as A2 is not coded as a missing value
dat_smart_replicated <- dat_smart_replicated %>% mutate(A2 = replace(A2, A1==-1, 0))


dat_smart_replicated <- dat_smart_replicated %>% arrange(desc(R), ID, A1, A2)

# -- Step 4: Estimate parameters of our model for the mean of the 
#            end-of-study outcome
model <- geem(Y2 ~ A1 + I((1*(A1==1))*A2), 
              id = ID, 
              corstr = "independence",
              data = dat_smart_replicated, 
              weights = design_weights)

summary(model)

# -- Step 5: Estimate end-of-study outcome means under each AI 
#            and pairwise differences
L <- rbind(
  # -- These statements get the end-of-study outcome mean under each AI
  "End-of-study mean: AI#1 (-1,.)"   = c(1, -1, 0),
  "End-of-study mean: AI#2 (+1,-1)"  = c(1, 1, -1),
  "End-of-study mean: AI#3 (+1,+1)"  = c(1, 1, 1),
  # -- These statements are to get all pairwise differences
  "Between groups diff: AI#1 - AI#2"              = c(0, -2,  1),
  "Between groups diff: AI#1 - AI#3"              = c(0,  -2, -1),
  "Between groups diff: AI#2 - AI#3"              = c(0, 0, -2)
  )

est_contrasts <- estimate(fit = model, combos = L)

print(est_contrasts)
```

### Compare estimates and confidence limits across adaptive interventions

```{r}
#| message: false
#| warning: false

# -- Note: The following code snippet employs advanced R coding concepts;
#          you may focus on the meaning of the output plot, rather than the 
#          specifics of the code itself, without losing understanding of
#          the basic workflow

# -- Convert matrix into data frame because ggplot does not permit matrix inputs
dat_plot <- data.frame(est_contrasts)

# -- We strongly prefer using syntactic names for data frames
colnames(dat_plot) <- c("estimate", "lower", "upper", "stderr", "pval")
dat_plot[["contrast_labels"]] <- row.names(dat_plot)
row.names(dat_plot) <- NULL

# -- Grab only the rows you will plot
dat_plot <- dat_plot %>% filter(grepl(pattern = "End-of-study mean:", x = contrast_labels, fixed = TRUE))

# -- Start building a graph
g <- ggplot(data = dat_plot, mapping = aes(x = factor(contrast_labels), y = estimate))

g <- g + scale_y_continuous(limits = c(50,80))
g <- g + scale_x_continuous(breaks = c(1,2,3), labels = c("AI#1 (-1,.)", "AI#2 (+1,-1)", "AI#3 (+1,+1)"))
g <- g + labs(x = "", y = "")
g <- g + labs(title = "End-of-study means and 95% CI's under each adaptive intervention")

# -- No adjustment for baseline covariates
g <- g + annotate("pointrange", x = 1, y = dat_plot[["estimate"]][1], ymin = dat_plot[["lower"]][1], ymax = dat_plot[["upper"]][1], colour = "aquamarine3", linewidth = 2, linetype = 1)
g <- g + annotate("pointrange", x = 2, y = dat_plot[["estimate"]][2], ymin = dat_plot[["lower"]][2], ymax = dat_plot[["upper"]][2], colour = "coral", linewidth = 2, linetype = 1)
g <- g + annotate("pointrange", x = 3, y = dat_plot[["estimate"]][3], ymin = dat_plot[["lower"]][3], ymax = dat_plot[["upper"]][3], colour = "gold", linewidth = 2, linetype = 1)

g <- g + annotate("segment", x = 0.9, xend = 1.1, y = dat_plot[["upper"]][1], yend = dat_plot[["upper"]][1], colour = "aquamarine3", linewidth = 2, linetype = 1)
g <- g + annotate("segment", x = 1.9, xend = 2.1, y = dat_plot[["upper"]][2], yend = dat_plot[["upper"]][2], colour = "coral", linewidth = 2, linetype = 1)
g <- g + annotate("segment", x = 2.9, xend = 3.1, y = dat_plot[["upper"]][3], yend = dat_plot[["upper"]][3], colour = "gold", linewidth = 2, linetype = 1)

g <- g + annotate("segment", x = 0.9, xend = 1.1, y = dat_plot[["lower"]][1], yend = dat_plot[["lower"]][1], colour = "aquamarine3", linewidth = 2, linetype = 1)
g <- g + annotate("segment", x = 1.9, xend = 2.1, y = dat_plot[["lower"]][2], yend = dat_plot[["lower"]][2], colour = "coral", linewidth = 2, linetype = 1)
g <- g + annotate("segment", x = 2.9, xend = 3.1, y = dat_plot[["lower"]][3], yend = dat_plot[["lower"]][3], colour = "gold", linewidth = 2, linetype = 1)

g <- g + annotate("point", x = c(1, 2, 3), y = dat_plot[["estimate"]], size = 8, colour = c("aquamarine3","coral","gold"))
```

```{r, fig.width=11, fig.height=7}
#| message: false
#| warning: false

# -- Reveal plot
g
```
